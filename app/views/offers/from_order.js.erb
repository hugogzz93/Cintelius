
// Para que salga un formulario nuevo si no se ha hecho oferta e indique con un formulario diferente si ya se ha hecho

// ids de ofertas para esta orden que ha hecho el usuario
<%= created_offers_product_ids = @offers.collect { |offer| offer.product.id} %>

<% @order.order_products.each do |order_product| %>
		<% if @order.due_date_past? || !@authorized_products.include?(order_product.product_id)%>
		// si ya paso la fecha limite o no esta autorizado para ofrecer este producto

		<% elsif @order.is_open? %>
		// no ha pasado la fecha limite, esta abierta la orden y esta autorizado este producto

		$('.offer_list').append('<%= j render partial: "offer_options_box.html.erb", locals: {order_product: order_product} %>')
		<% end %>
<% end %>


<% @combos.each do |combo| %>
	$('.combo_list').append("<%= j render partial: 'combo_box.html.erb', locals: {f: combo, function: 'offer'} %>")
<% end %>

// Para que no se pueda hcer ningun combo despues de la fecha limite
<% if !@order.due_date_past? and @order.is_open? %>
	<% combo = @order.combos.create %>
	$('.combo_list').prepend("<%= j render partial: 'combo_form.html.erb', locals: {f: combo} %>")
	$('.combo_list').prepend("<div class='add_new_combo_button active'>Nueva Cotizaci√≥n</div>")
<% end %>


// order_info

<% @order.order_products.each do |order_product| %>
	<% if @authorized_products.include?(order_product.product_id) %>
		$('.order_product_info_list').append("<%= j render partial: '/orders/tab_product_info.html.erb', locals: {f: order_product}%>") // actualizar el tab	
	<% end %>
<% end %>

<% if @order.comment %>
	$('.order_comment_container').append('<div class="order_info_comment_header">Mensaje del comprador:</div>')
	$('.order_comment_container').append('<%= j @order.comment.content %>')
<% end %>

// Se pueda acceder al tab de informacion con un boton
$('#combos_header').append("<div class='info_tab_button'><%= j image_tag('icons/icon-info.png')%></div>")
$('.info_tab_close_button').append("<%= j image_tag('icons/icon-x.png') %>")
$('.order_user_info_container').empty()
$('.order_user_info_container').append('<span>Datos del comprador</span></br>')
$('.order_user_info_container').append('<span> Correo: </span><%= j @order.user.email %> <br/>')
$('.order_user_info_container').append('<span> Telefono: </span><%= j @order.user.user_detail.telephone.to_s %><br>')
$('.order_user_info_container').append('<span> Direccion: </span><%= j @order.user.user_detail.address %> <br>')
	


// Para que el checkbox se marque cuando un producto sea agregado
$('.combo_product_add_button').on('click', function(e) {
	// $(e.target).attr('type', 'button')
	if (!$(e.target).hasClass('disabled')) {
		idToCheck = $(e.target).attr('data-product-id')
		console.log('a')
		$('.product_list_area a.add_fields').click();
		$($('ul.product_list_area').children('#new_combo .combo_product_box').last().children('.product_id_field')).val(idToCheck)
		$($('.combo_product_remove_button').last()).attr('data-product-id', idToCheck).attr('type', 'button')
		$(e.target).addClass('disabled')
		productName = $(e.target).attr('data-product-name')
		productUnits = $(e.target).attr('data-product-units')
		productId = $(e.target).attr('data-product-id')
		$('#new_combo .combo_product_box').last().children('.combo_product_name').text(productName)
		$('.combo_product_price_field').last().attr('data-product-id', productId)
		$('.combo_product_price_field').last().attr('data-previous-value', '0')
		$($('.combo_product_unit_field').last()).val(productUnits).attr('data-product-id', productId)


		// Para que se eliminen los campos si se desea remover el producto
		$('button.combo_product_remove_button').on('click', function(e){
			idToRemove = $(e.target).attr('data-product-id')
			$(e.target).parent().remove()
			$($('.combo_product_add_button[data-product-id='+ idToRemove+ ']')).removeClass('disabled')

			if ($('.combo_product_form').size() == 0) {
				$('.products_and_comment_field').addClass('hidden')
				$('.combo_instructions_container').removeClass('hidden')

				$('#new_combo_submit_button').prop('disabled', true)
			};
		})

		// actualiza el precio total cuando se actualiza el individual
		bindUnitaryPriceToTotal()


		// quita las instrucciones cuando se seleccionan productos, tambien habilida el boton de submit
		if ($('.combo_product_form').size() > 0) {
			$('.products_and_comment_field').removeClass('hidden')
			$('.combo_instructions_container').addClass('hidden')

			$('#new_combo_submit_button').prop('disabled', false)
		};

	};
})

$('#new_combo').on('submit', function() {
	$('#new_combo_submit_button').prop('disabled', false)
})


// actualiza el precio total del combo
$('.combo_product_price_field').on('change', function(e) {

})




$('.seller_comment_tag').on('click', function(e){
	$(e.target).attr('type', 'button')
	$(e.target).siblings('.comment_box').children('.seller_comment').css('display', 'block')
	$(e.target).siblings('.comment_box').children('.buyer_comment').css('display', 'none')
})

$('.buyer_comment_tag').on('click', function(e){
	$(e.target).attr('type', 'button')
	$(e.target).siblings('.comment_box').children('.buyer_comment').css('display', 'block')
	$(e.target).siblings('.comment_box').children('.seller_comment').css('display', 'none')
})

$('input#offer_unitary_price').on('focus', function(e){
	$($(e.target).closest('.left_side').siblings('.right_side').children('.unitary_price_notice')).addClass('active');
})

$('input#offer_unitary_price').on('blur', function(e){
	$($(e.target).closest('.left_side').siblings('.right_side').children('.unitary_price_notice')).removeClass('active');
})

// Para que se elimine el formulario si se creo la oferta
$('.new_offer_submit_button').on('click', function(e) {
	$(e.target).closest('.offer_product_box').addClass('deletion_candidate');
})

// Para que se elimine el formulario si se creo el combo
$('.new_combo_form .submit_button').on('click', function(e) {
	$(e.target).closest('.new_combo_form').addClass('clear_candidate');
})


// Para que se agreguen campos por producto
$('form .add_fields').on('click', function(e) {
		time = new Date().getTime()
		regexp = new RegExp($(this).data('id'), 'g')
		$(this).before($(this).data('fields').replace(regexp, time))
		event.preventDefault()
		$('.new_combo_form input[type=submit]').prop('disabled', false)
})

//se vuelve visible el formulario de combo
$('.add_new_combo_button').on('click', function(e) {
	$('#new_combo').addClass('active')
	$('.combo_product_add_button').removeClass('disabled')
	$(e.target).addClass('hidden')
})

// 

// Revela/esconde el comentrio de cada producto en into tabQuantity
$('.product_main_info').on('click', function(e) {
	if ($(e.target).hasClass('active')) {
		$(e.target).removeClass('active')
		$(e.target).siblings('.product_comment_container').removeClass('active')		
	} else {
		$(e.target).addClass('active')
		$(e.target).siblings('.product_comment_container').addClass('active')	
	}
})

$('.info_tab_button').on('click', function() {
	$('.column.order_info').addClass('active')
})

$('.info_tab_close_button').on('click', function() {
	$('.column.order_info').removeClass('active')
})

// modifica el valor del campo precio total de acuerdo a los productos que tiene
function bindUnitaryPriceToTotal() {

	$('.combo_product_remove_button:last').on('click', function(e) {
		productId = $(e.target).attr('data-product-id')
		unitPrice = $('.combo_product_price_field[data-product-id=' + productId +']').attr('data-previous-value')

		comboPrice = $('#combo_price').val()
		newComboPrice = parseFloat(unitPrice.toFixed(2)) + parseFloat(comboPrice)
		$('#combo_price').val(parseFloat(newComboPrice).toFixed(2))
	})

	// actualiza en cambio al precio unitario
	$('.combo_product_price_field:last').on('keyup', function(e) {
		productId = $(e.target).attr('data-product-id')
		units = $('.combo_product_unit_field[data-product-id=' + productId +']').val()
		newUnitPrice = parseFloat($(e.target).val()) * parseFloat(units)

		if (isNaN(newUnitPrice)) {
			newUnitPrice = 0
		};

		difference = newUnitPrice - $(e.target).attr('data-previous-value')
		$(e.target).attr('data-previous-value', newUnitPrice)
		comboPrice = $('#combo_price').val()
		newComboPrice = parseFloat(difference.toFixed(2)) + parseFloat(comboPrice)
		$('#combo_price').val(parseFloat(newComboPrice).toFixed(2))
		console.log('changed')
	})
}







$('.loading_animation').removeClass('active')
