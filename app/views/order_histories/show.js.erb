// agrega informacion a la segunda parte del historial
$('.order_info_block_body').empty()
$('.order_info_block_body').append(" <%= escape_javascript(render partial: 'order_history_products_block.html.erb', locals: { single_combos: @single_combos, multi_combos: @multi_combos, product_name_hash: @product_name_hash}).html_safe %> ")
$('.order_history_header_button.active').removeClass('active');
$('.order_history_header_button:first').addClass('active');

product_graph_data = [];


// encuentra el promedio de cada producto para ofertas individuales
function getAverage() {
	history_lists = $('.combo_product_history_list');
	// arreglo de listas
	$.each(history_lists, function(index, value) {
		children_array = $(value).children('.combo_product_history')
		sum = 0
		quantity = 0
		// arreglo de ofertas
		$.each(children_array, function(index, value) {
			sum += parseFloat($(value).attr('data-price'))
			++quantity
		})
		average = sum/quantity
		average = Math.round(average).toFixed(2);
		if (isNaN(average)) { average = " -"};
		average_message = " <%= t 'average_abv' %>: $" + average
		$(value).children('.product_average_container').text(average_message);

		// indica la divergencia del promedio para cada producto
		setAvgArrows(children_array, average);


	})
}


// recibe un arreglo de ofertas individuales
function setAvgArrows(array, average) {
	$.each(array, function(index, value) {
		id = $(value).attr('data-combo-history-id')
		price = $(value).attr('data-price')
		difference = Math.round(-1 * (average - price) / average * 100).toFixed(0);

		if (difference >= 0) {
			$('.combo_product_history[data-combo-history-id=' + id + '] .product_history_difference').addClass('up')
		} else {
			$('.combo_product_history[data-combo-history-id=' + id + '] .product_history_difference').addClass('down')
		};
		$('.combo_product_history[data-combo-history-id=' + id + '] .difference_percentage').text('%' + difference)
	})
}

getAverage()
console.log('))')

function stepSingleOffers(direction) {
	active_block = $('.individual_offers_container').attr('data-active-block')
	console.log("hello")
	if (direction == "left") {

		$('.individual_offers_container').attr('data-active-block', parseInt(active_block) - 1)
		$('.combo_product_history_list[data-block-group=' + active_block + ']').addClass('hidden')
		active_block--
		$('.combo_product_history_list[data-block-group=' + active_block + ']').removeClass('hidden')
	}else if(direction == "right") {
		$('.individual_offers_container').attr('data-active-block', parseInt(active_block) + 1)
		$('.combo_product_history_list[data-block-group=' + active_block + ']').addClass('hidden')
		active_block++
		$('.combo_product_history_list[data-block-group=' + active_block + ']').removeClass('hidden')
	};
}

function stepMultiOffers(direction) {
	// left or right	
	if (direction == "left") {
		active_block = $('.multiple_order_history_window').attr('data-active-block')
		$('.multiple_order_history_window').attr('data-active-block', parseInt(active_block) - 1)

		$('.combo_product_history[data-block-group="' + active_block + '"]').addClass("hidden");
		$('.product_header[data-block-group="' + active_block + '"]').addClass("hidden");
		active_block--;
		$('.combo_product_history[data-block-group="' + active_block + '"]').removeClass("hidden");
		$('.product_header[data-block-group="' + active_block + '"]').removeClass("hidden");

	} else if(direction == "right") {
		active_block = $('.multiple_order_history_window').attr('data-active-block')
		$('.multiple_order_history_window').attr('data-active-block', parseInt(active_block) + 1)

		$('.combo_product_history[data-block-group="' + active_block + '"]').addClass("hidden");
		$('.product_header[data-block-group="' + active_block + '"]').addClass("hidden");
		active_block++;
		$('.combo_product_history[data-block-group="' + active_block + '"]').removeClass("hidden");
		$('.product_header[data-block-group="' + active_block + '"]').removeClass("hidden");

	};
}


// cantidad de bloques que caben a la vez en la tabla del historial
var groupOfferScreenAmount = 5;

$.ajax({
	url: "<%= j order_history_path(id: params[:id], format: :json) %>",
	contentType: "application/json",
	type: "GET",
	success: function(jsonData) {

		// creaciion de cuadros para comparar combos
		setUpOrderDetails(jsonData);

		// creacion de las graficas
		product_graph_data = getProductArray(jsonData);
		setUpCostGraph(product_graph_data);
		setUpUnitGraph(product_graph_data);


		
	},
	fail: function(errorMsg) {

	}
})

$('.group_offers .step_button.left .step_arrow').on('click', function(e) {
	steps = $(e.target).attr('steps')
	if ( steps > 0) {
		$(e.target).attr('steps', --steps)
		rSteps = $('.group_offers .step_button.right .step_arrow').attr('steps')
		$('.group_offers .step_button.right .step_arrow').attr('steps', ++rSteps)
		stepMultiOffers("left")
	};
})

$('.group_offers  .step_button.right .step_arrow').on('click', function(e) {
	steps = $(e.target).attr('steps')
	if ( steps > 0) {
		$(e.target).attr('steps', --steps)
		lSteps = $('.group_offers .step_button.left .step_arrow').attr('steps')
		$('.group_offers .step_button.left .step_arrow').attr('steps', ++lSteps)
		stepMultiOffers("right")
	};
})

$('.individual_offers_step_button.left .step_arrow').on('click', function(e) {
	steps = $(e.target).attr('steps')
	if ( steps > 0) {
		$(e.target).attr('steps', --steps)
		rSteps = $('.individual_offers_step_button.right .step_arrow').attr('steps')
		$('.individual_offers_step_button.right .step_arrow').attr('steps', ++rSteps)
		stepSingleOffers("left")
	};
})

$('.individual_offers_step_button.right .step_arrow').on('click', function(e) {
	steps = $(e.target).attr('steps')
	if ( steps > 0) {
		$(e.target).attr('steps', --steps)
		lSteps = $('.individual_offers_step_button.left .step_arrow').attr('steps')
		$('.individual_offers_step_button.left .step_arrow').attr('steps', ++lSteps)
		stepSingleOffers("right")
	};
})

function setUpOrderDetails(jsonData) {

	// product headers
		var product_headers = "";
		var block_group = 1;

		for (var i = 0; i < jsonData.products.length; i++) {
			id = jsonData.products[i].id;
			name = jsonData.products[i].name;

			product_headers += "<div class='product_header hidden' product_id='" + id + 
									"' data-block-group='" + block_group + "'>"

				product_headers += name;
			product_headers += "</div>"

			if ((i + 1) % groupOfferScreenAmount == 0) { block_group++};
		};
		$(".product_header_list").append(product_headers);



		// 

		for (var i = 0; i < jsonData.multiple_offer_combos.length; i++) {
			multiple_offer_combo = jsonData.multiple_offer_combos[i]

			// organization
			organization = multiple_offer_combo.organization;
			organization_div = "<div class='organization_block' data-combo-status='" + multiple_offer_combo.combo_history.status+ "'>" + organization + "</div>";
			$('.left_side_bar').append(organization_div)


			combo_history_list = "<div class='combo_product_history_list' data-combo-history-id='" + 
										multiple_offer_combo.combo_history.id + "' data-combo-status='" + multiple_offer_combo.combo_history.status + "'>"

			// esqueleto para cada producto
			block_group = 1;
			for (var y = 0; y < jsonData.products.length; y++) {
				product = jsonData.products[y]
				combo_history_list += "<div class='combo_product_history empty hidden' data-combo-history-id='" + 
												multiple_offer_combo.combo_history.id + 
												"' data-product-id='" + product.id + 
												"' data-block-group='" + block_group + "'> </div>"

				if ((y + 1) % groupOfferScreenAmount == 0) { block_group++};

			};

			combo_history_list += "</div>"
			$('.multiple_order_history_window').append(combo_history_list)



			// agrega informacion al esqueleto
			for (var x = 0; x < multiple_offer_combo.combo_product_histories.length; x++) {
				combo_product_history = multiple_offer_combo.combo_product_histories[x].combo_product_history
				first_row = "<div class='first_row'>$: " + combo_product_history.unitary_price + "</div>"
				second_row = "<div class='second_row'>Kg: " + combo_product_history.units + "</div>"
				$(".combo_product_history[data-combo-history-id='" + combo_product_history.combo_history_id + 
					"'][data-product-id='" + combo_product_history.product_id + "']").append(first_row + second_row).removeClass('empty')
			};

			// combo_history_total
			combo_history_total = "<div class='combo_history_total' data-combo-status='" + multiple_offer_combo.combo_history.status + "'>Total:<br/>$" + multiple_offer_combo.combo_history.price + "</div>"
			$('.right_side_bar').append(combo_history_total)

			// cantidad de movimientos para las flechas
			$('.step_button.left .step_arrow').attr('steps', 0);
			$('.step_button.right .step_arrow').attr('steps', Math.floor( jsonData.products.length / groupOfferScreenAmount))

			// step button de single offer
			// $('.step_arrow')
			$('[data-block-group="1"]').removeClass('hidden')

			combo_product_history_height = $('.group_offers .combo_product_history:not("empty")').outerHeight()
			$('.organization_block').css('height', combo_product_history_height)
			$('.combo_history_total').css('height', combo_product_history_height)
			$('.group_offers .combo_product_history_list').css('min-height', $('.group_offers .combo_product_history:not("empty")').outerHeight(true))
		};
}


function getProductArray(jsonData) {
	var product_array = [];
	for (var i = 0; i < jsonData.products.length; i++) {
			product_id = jsonData.products[i].id
			product_name = jsonData.products[i].name
			total_quantity = 0;
			total_cost = 0;
				
			for (var x = 0; x < jsonData.multiple_offer_combos.length; x++) {
				combo = jsonData.multiple_offer_combos[x];
		
				if (combo.combo_history.status == "received"
					|| combo.combo_history.status == "selected") {
					for (var y = 0; y < combo.combo_product_histories.length; y++) {
						if (combo.combo_product_histories[y].combo_product_history.product_id == product_id) {
							total_quantity += parseInt(combo.combo_product_histories[y].combo_product_history.units)
							total_cost += parseInt(combo.combo_product_histories[y].combo_product_history.unitary_price)
						};
					};
				}
			};
			for (var x = 0; x < jsonData.single_offer_combos.length; x++) {
				combo = jsonData.single_offer_combos[x]
				if (combo.combo_history.status == "received"
					|| combo.combo_history.status == "selected") {
						if (combo.combo_product_history.product_id == product_id) {
							total_quantity += parseInt(combo.combo_product_history.units)
							total_cost += parseInt(combo.combo_product_history.unitary_price)
						};
				}
			};
			product_array.push({
				product_id: product_id,
				product_name: product_name,
				total_quantity: total_quantity,
				total_cost: total_cost
			});
	};
	return product_array
}

function setUpCostGraph(product_graph_data) {
	$('.order_history_graphs_block').append('<div class="graph_label">Gasto total por producto</div>')
	var canvasWidth = 500;
	var canvasHeight = 250;
	var xPadding = 50;
	var yPadding = 100;
	var height = canvasHeight - yPadding;
	var width = canvasWidth - xPadding;

	
	var columnPadding = 1;
	// var max_column_width = 40;


	max_cost = d3.max(product_graph_data.map(function(d) {return d.total_cost}));

	var costLinearScale = d3.scale.linear()
								.domain([0, max_cost])
								.range([1, height]);

    var yAxisScale = d3.scale.linear()
    							.domain([ max_cost, 0])
								.range([1, height]);
    
	var xAxisScale = d3.scale.ordinal()
					    .domain(product_graph_data.map(function(d) {return d.product_name}))
					    .rangeRoundBands([0, width], .1);

	var xAxis = d3.svg.axis()
					    .scale(xAxisScale)
					    .orient("bottom");					    

	var yAxis = d3.svg.axis()
						.scale(yAxisScale)
						.orient('left')
						.innerTickSize([width])
						.outerTickSize([10])


    var colorScale = d3.scale.linear()
    							.domain([0, max_cost/2, max_cost])
    							.range(['#F44410', '#F5DA29', '#7D4BA4'])
    							// .range(['#46AA37', '#4199ED', '#F54511'])
    							// .domain([0, max_cost*.25, max_cost*.5, max_cost*.75, max_cost])
    							// .range(['#41A736','#7D4BA4', '#2380D8', '#E27612', '#F54511'])



    var product_quantity_graph = d3.select('.order_history_graphs_block').append('svg')
    															.attr('width', canvasWidth)
    															.attr('height', canvasHeight)
    var y_axis = product_quantity_graph.append('g')
									.attr('class', 'y Axis')
									.attr('transform', 'translate(' + canvasWidth + ')')
    								.call(yAxis)

    product_quantity_graph.append("g")
							    .attr("class", "x Axis")
							    .attr('transform', 'translate(' + xPadding + ', ' + height + ')')
							    .call(xAxis)
							    .selectAll("text")  
						            .style("text-anchor", "end")
						            .attr("dx", "-.8em")
						            .attr("dy", ".15em")
						            .attr("transform", "rotate(-75)" );


    var column_group = product_quantity_graph.append('g')
    											.attr('class', 'column_group')
    											.attr('transform', 'translate(' + xPadding + ')');



    var columns = column_group.selectAll('rect')
    											.data(product_graph_data)
    											.enter()
    											.append('rect')

    // Define the div for the tooltip
	var div = d3.select("body").append("div")	
	    .attr("class", "tooltip")
	    .attr("z-index", "99")				
	    .style("opacity", 1)
    											

    var columnAttributes = columns
    						// .attr('width', function() {return d3.min([width / product_graph_data.length - columnPadding, max_column_width])	;})
    						.attr('width', function(d) {return xAxisScale.rangeBand()})
    						.attr('height', function(d) {return costLinearScale(d.total_cost); })
    						// .attr('x', function(d, i) {return  i * ( width / product_graph_data.length);  } )
    						.attr('x', function(d) {return xAxisScale(d.product_name)})
    						.attr('y', function(d) {return height - costLinearScale(d.total_cost); })
    						.attr('fill', function(d) {return colorScale(d.total_cost);} )
    						.attr('val', function(d) {return d.total_cost} )
    						.on('mouseover', function(d, i) {
						       div.transition()		
				                .duration(0)		
				                .style("opacity", .9)
				                div.html('<span>' + d.product_name +'</span>'+ ' <span style="color:red">$' + d.total_cost + '</span>')
				                // $('div.tooltip').offset({ top: event.pageY, left: event.pageX})
				                $('div.tooltip').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
    							// console.log(d3.mouse(this)[0])
    							d3.select(this).style('fill', '#4FAE3A')
    						})
    						.on('mousemove', function(d, i) {
    							$('div.tooltip').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
    						})
    						.on('mouseout', function(d, i) {
						       div.transition()		
				                .duration(0)		
				                .style("opacity", 0);	
    							d3.select(this).style('fill', colorScale(d.total_cost))
    						})


}

function setUpUnitGraph(product_graph_data) {

	// Titulo
	$('.order_history_graphs_block').append('<div class="graph_label">Cantidad por producto</div>')
	var canvasWidth = 500;
	var canvasHeight = 250;
	var xPadding = 50;
	var yPadding = 100;
	var height = canvasHeight - yPadding;
	var width = canvasWidth - xPadding;

	
	var columnPadding = 1;
	// var max_column_width = 40;


	max_units = d3.max(product_graph_data.map(function(d) {return d.total_quantity}));

	var costLinearScale = d3.scale.linear()
								.domain([0, max_units])
								.range([1, height]);

    var yAxisScale = d3.scale.linear()
    							.domain([ max_units, 0])
								.range([1, height]);
    
	var xAxisScale = d3.scale.ordinal()
					    .domain(product_graph_data.map(function(d) {return d.product_name}))
					    .rangeRoundBands([0, width], .1);

	var xAxis = d3.svg.axis()
					    .scale(xAxisScale)
					    .orient("bottom");					    

	var yAxis = d3.svg.axis()
						.scale(yAxisScale)
						.orient('left')
						.innerTickSize([width])
						.outerTickSize([10])


    var colorScale = d3.scale.linear()
    							.domain([0, max_units/2, max_units])
    							.range(['#F44410', '#F5DA29', '#7D4BA4'])
    							// .domain([0, max_units*.25, max_units*.5, max_units*.75, max_units])
    							// .range(['#F44410','#7D4BA4', '#2380D8', '#E27612', '#F54511'])



    var product_unit_graph = d3.select('.order_history_graphs_block').append('svg')
    															.attr('width', canvasWidth)
    															.attr('height', canvasHeight)
    															.append('g')
    															.attr('transform', 'translate(0, 5)')
    var y_axis = product_unit_graph.append('g')
									.attr('class', 'y Axis')
									.attr('transform', 'translate(' + canvasWidth + ')')
    								.call(yAxis)

    product_unit_graph.append("g")
							    .attr("class", "x Axis")
							    .attr('transform', 'translate(' + xPadding + ', ' + height + ')')
							    .call(xAxis)
							    .selectAll("text")  
						            .style("text-anchor", "end")
						            .attr("dx", "-.8em")
						            .attr("dy", ".15em")
						            .attr("transform", "rotate(-75)" );


    var column_group = product_unit_graph.append('g')
    											.attr('class', 'column_group')
    											.attr('transform', 'translate(' + xPadding + ')');



    var columns = column_group.selectAll('rect')
    											.data(product_graph_data)
    											.enter()
    											.append('rect')
    
        // Define the div for the tooltip
	var div2 = d3.select("body").append("div")	
	    .attr("class", "tooltip2")
	    .attr("z-index", "99")				
	    .style("opacity", 1)							

    var columnAttributes = columns
    						// .attr('width', function() {return d3.min([width / product_graph_data.length - columnPadding, max_column_width])	;})
    						.attr('width', function(d) {return xAxisScale.rangeBand()})
    						.attr('height', function(d) {return costLinearScale(d.total_quantity); })
    						// .attr('x', function(d, i) {return  i * ( width / product_graph_data.length);  } )
    						.attr('x', function(d) {return xAxisScale(d.product_name)})
    						.attr('y', function(d) {return height - costLinearScale(d.total_quantity); })
    						.attr('fill', function(d) {return colorScale(d.total_quantity);} )
    						.on('mouseover', function(d, i) {
						       div2.transition()		
				                .duration(0)		
				                .style("opacity", .9)
				                div2.html('<span>' + d.product_name +'</span>'+ ' <span style="color:red">' + d.total_quantity + 'Kg</span>')
				                // $('div.tooltip').offset({ top: event.pageY, left: event.pageX})
				                $('div.tooltip2').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
    							// console.log(d3.mouse(this)[0])
    							d3.select(this).style('fill', '#4FAE3A')
    						})
    						.on('mousemove', function(d, i) {
    							$('div.tooltip2').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
    						})
    						.on('mouseout', function(d, i) {
						       div2.transition()		
				                .duration(0)		
				                .style("opacity", 0);	
    							d3.select(this).style('fill', colorScale(d.total_quantity))
    						})

    // var text = product_unit_graph.selectAll('text')
    // 					.data(product_graph_data)
    // 					.enter()
				// 	    .append('text')
    // 					.attr('x', function(d) {return xAxisScale(d.product_name)})
    // 					.attr('y', function(d) {return height - costLinearScale(d.units);})
    // 					.text(function(d) {return d.units})
}

function assignBlockIds() {
	blockSize = 5;
	block_group = 1;
	$('.individual_offers_container').attr('data-active-block', block_group)
	$('.combo_product_history_list[data-block-group=' + block_group + ']').removeClass('hidden')
	offer_lists = $('.combo_product_history_list')
	for (var i = 0; i < offer_lists.length; i++) {
		$(offer_lists[i]).attr('data-block-group', block_group);

		if ((i + 1) % blockSize == 0) { block_group++};
	};

}

assignBlockIds();