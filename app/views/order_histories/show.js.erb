// agrega informacion a la segunda parte del historial
$('.order_info_block_body').empty()
$('.order_info_block_body').append(" <%= escape_javascript(render partial: 'order_history_products_block.html.erb', locals: { single_combos: @single_combos, multi_combos: @multi_combos, product_name_hash: @product_name_hash}).html_safe %> ")
$('.order_history_header_button.active').removeClass('active');
$('.order_history_header_button:first').addClass('active');
$('.tooltip_box').remove()



product_graph_data = [];


// encuentra el promedio de cada producto para ofertas individuales
function getAverage() {
	history_lists = $('.combo_product_history_list');
	// arreglo de listas
	$.each(history_lists, function(index, value) {
		children_array = $(value).children('.combo_product_history')
		sum = 0
		quantity = 0
		// arreglo de ofertas
		$.each(children_array, function(index, value) {
			sum += parseFloat($(value).attr('data-price'))
			++quantity
		})
		average = sum/quantity
		average = Math.round(average).toFixed(2);
		if (isNaN(average)) { average = " -"};
		average_message = " <%= t 'average_abv' %>: $" + average
		$(value).children('.product_average_container').text(average_message);

		// indica la divergencia del promedio para cada producto
		setAvgArrows(children_array, average);


	})
}

// recibe un arreglo de ofertas individuales
function setAvgArrows(array, average) {
	$.each(array, function(index, value) {
		id = $(value).attr('data-combo-history-id')
		price = $(value).attr('data-price')
		difference = Math.round(-1 * (average - price) / average * 100).toFixed(0);

		if (difference >= 0) {
			$('.combo_product_history[data-combo-history-id=' + id + '] .product_history_difference').addClass('up')
		} else {
			$('.combo_product_history[data-combo-history-id=' + id + '] .product_history_difference').addClass('down')
		};
		$('.combo_product_history[data-combo-history-id=' + id + '] .difference_percentage').text('%' + difference)
	})
}

getAverage()

function stepSingleOffers(direction) {
	active_block = $('.individual_offers_container').attr('data-active-block')
	if (direction == "left") {

		$('.individual_offers_container').attr('data-active-block', parseInt(active_block) - 1)
		$('.combo_product_history_list[data-block-group=' + active_block + ']').addClass('hidden')
		active_block--
		$('.combo_product_history_list[data-block-group=' + active_block + ']').removeClass('hidden')
	}else if(direction == "right") {
		$('.individual_offers_container').attr('data-active-block', parseInt(active_block) + 1)
		$('.combo_product_history_list[data-block-group=' + active_block + ']').addClass('hidden')
		active_block++
		$('.combo_product_history_list[data-block-group=' + active_block + ']').removeClass('hidden')
	};
}

function stepMultiOffers(direction) {
	// left or right	
	if (direction == "left") {
		active_block = $('.multiple_order_history_window').attr('data-active-block')
		$('.multiple_order_history_window').attr('data-active-block', parseInt(active_block) - 1)

		$('.combo_product_history[data-block-group="' + active_block + '"]').addClass("hidden");
		$('.product_header[data-block-group="' + active_block + '"]').addClass("hidden");
		active_block--;
		$('.combo_product_history[data-block-group="' + active_block + '"]').removeClass("hidden");
		$('.product_header[data-block-group="' + active_block + '"]').removeClass("hidden");

	} else if(direction == "right") {
		active_block = $('.multiple_order_history_window').attr('data-active-block')
		$('.multiple_order_history_window').attr('data-active-block', parseInt(active_block) + 1)

		$('.combo_product_history[data-block-group="' + active_block + '"]').addClass("hidden");
		$('.product_header[data-block-group="' + active_block + '"]').addClass("hidden");
		active_block++;
		$('.combo_product_history[data-block-group="' + active_block + '"]').removeClass("hidden");
		$('.product_header[data-block-group="' + active_block + '"]').removeClass("hidden");

	};
}

// cantidad de bloques que caben a la vez en la tabla del historial
var groupOfferScreenAmount = 5;

$.ajax({
	url: "<%= j order_history_path(id: params[:id], format: :json) %>",
	contentType: "application/json",
	type: "GET",
	success: function(jsonData) {

		// creaciion de cuadros para comparar combos
		setUpOrderDetails(jsonData);

		// creacion de las graficas
		general_graph_data = getProductArray(jsonData);
		setUpCostGraph(general_graph_data);
		setUpUnitGraph(general_graph_data);

		// graficas productos individuales
		addProductSelectionBox(jsonData);
		setUpProductsPieGraph(general_graph_data);
		setUpProductsGraph(general_graph_data)
		// setUpPie();

		
	},
	fail: function(errorMsg) {
		console.log(errorMsg)
	}
})

$('.group_offers .step_button.left .step_arrow').on('click', function(e) {
	steps = $(e.target).attr('steps')
	if ( steps > 0) {
		$(e.target).attr('steps', --steps)
		rSteps = $('.group_offers .step_button.right .step_arrow').attr('steps')
		$('.group_offers .step_button.right .step_arrow').attr('steps', ++rSteps)
		stepMultiOffers("left")
	};
})

$('.group_offers  .step_button.right .step_arrow').on('click', function(e) {
	steps = $(e.target).attr('steps')
	if ( steps > 0) {
		$(e.target).attr('steps', --steps)
		lSteps = $('.group_offers .step_button.left .step_arrow').attr('steps')
		$('.group_offers .step_button.left .step_arrow').attr('steps', ++lSteps)
		stepMultiOffers("right")
	};
})

$('.individual_offers_step_button.left .step_arrow').on('click', function(e) {
	steps = $(e.target).attr('steps')
	if ( steps > 0) {
		$(e.target).attr('steps', --steps)
		rSteps = $('.individual_offers_step_button.right .step_arrow').attr('steps')
		$('.individual_offers_step_button.right .step_arrow').attr('steps', ++rSteps)
		stepSingleOffers("left")
	};
})

$('.individual_offers_step_button.right .step_arrow').on('click', function(e) {
	steps = $(e.target).attr('steps')
	if ( steps > 0) {
		$(e.target).attr('steps', --steps)
		lSteps = $('.individual_offers_step_button.left .step_arrow').attr('steps')
		$('.individual_offers_step_button.left .step_arrow').attr('steps', ++lSteps)
		stepSingleOffers("right")
	};
})

function setUpOrderDetails(jsonData) {

	// product headers

		var product_headers = "";
		var block_group = 1;

		for (var i = 0; i < jsonData.products.length; i++) {
			id = jsonData.products[i].id;
			name = jsonData.products[i].name;

			product_headers += "<div class='product_header hidden' product_id='" + id + 
									"' data-block-group='" + block_group + "'>"

			product_headers += name;
			product_headers += "</div>"

			if ((i + 1) % groupOfferScreenAmount == 0) { block_group++};
		};
		$(".product_header_list").append(product_headers);



		// 

		for (var i = 0; i < jsonData.multiple_offer_combos.length; i++) {
			multiple_offer_combo = jsonData.multiple_offer_combos[i]

			// organization
			organization = multiple_offer_combo.organization;
			organization_div = "<div class='organization_block' data-combo-status='" + multiple_offer_combo.combo_history.status+ "'>" + organization + "</div>";
			$('.left_side_bar').append(organization_div)


			combo_history_list = "<div class='combo_product_history_list' data-combo-history-id='" + 
										multiple_offer_combo.combo_history.id + "' data-combo-status='" + multiple_offer_combo.combo_history.status + "'>"

			// esqueleto para cada producto
			block_group = 1;
			for (var y = 0; y < jsonData.products.length; y++) {
				product = jsonData.products[y]
				combo_history_list += "<div class='combo_product_history empty hidden' data-combo-history-id='" + 
												multiple_offer_combo.combo_history.id + 
												"' data-product-id='" + product.id + 
												"' data-block-group='" + block_group + "'> </div>"

				if ((y + 1) % groupOfferScreenAmount == 0) { block_group++};

			};

			combo_history_list += "</div>"
			$('.multiple_order_history_window').append(combo_history_list)



			// agrega informacion al esqueleto
			for (var x = 0; x < multiple_offer_combo.combo_product_histories.length; x++) {
				combo_product_history = multiple_offer_combo.combo_product_histories[x].combo_product_history
				first_row = "<div class='first_row'>$: " + combo_product_history.unitary_price + "</div>"
				second_row = "<div class='second_row'>Kg: " + combo_product_history.units + "</div>"
				$(".combo_product_history[data-combo-history-id='" + combo_product_history.combo_history_id + 
					"'][data-product-id='" + combo_product_history.product_id + "']").append(first_row + second_row).removeClass('empty')
			};

			// combo_history_total
			combo_history_total = "<div class='combo_history_total' data-combo-status='" + multiple_offer_combo.combo_history.status + "'>Total:<br/>$" + multiple_offer_combo.combo_history.price + "</div>"
			$('.right_side_bar').append(combo_history_total)

			// cantidad de movimientos para las flechas
			$('.step_button.left .step_arrow').attr('steps', 0);
			$('.step_button.right .step_arrow').attr('steps', Math.floor( jsonData.products.length / groupOfferScreenAmount))

			// step button de single offer
			// $('.step_arrow')
			$('[data-block-group="1"]').removeClass('hidden')

			combo_product_history_height = $('.group_offers .combo_product_history:not(".empty")').outerHeight()
			$('.organization_block').css('height', combo_product_history_height)
			$('.combo_history_total').css('height', combo_product_history_height)
			$('.group_offers .combo_product_history_list').css('min-height', $('.group_offers .combo_product_history:not(".empty")').outerHeight(true))
		};

		// adjusts multiple-offer graph to different product name sizes
		$('.group_offers_step_button').outerHeight($('.product_header_list').outerHeight())
}

// crea un arreglo de objetos para cada producto que contiene total de costo y unidades compradas por 
// el usuario junto con la contribuci√≥n de unidades de cada proveedor
function getProductArray(jsonData) {
	var product_array = [];
	for (var i = 0; i < jsonData.products.length; i++) {
			product_id = jsonData.products[i].id
			product_name = jsonData.products[i].name
			total_quantity = 0;
			total_cost = 0;

			var product_units_by_provider = new Array
			var product_price_by_provider = new Array
				
			for (var x = 0; x < jsonData.multiple_offer_combos.length; x++) {
				combo = jsonData.multiple_offer_combos[x];
		
				if (combo.combo_history.status == "received"
					|| combo.combo_history.status == "selected") {
					for (var y = 0; y < combo.combo_product_histories.length; y++) {
						if (combo.combo_product_histories[y].combo_product_history.product_id == product_id) {
							individual_quantity = parseInt(combo.combo_product_histories[y].combo_product_history.units)
							total_quantity += individual_quantity
							individual_cost = parseInt(combo.combo_product_histories[y].combo_product_history.unitary_price)
							total_cost += individual_cost
							product_units_by_provider[combo.organization] == undefined ? product_units_by_provider[combo.organization] = individual_quantity : product_units_by_provider[combo.organization] += individual_quantity
							product_price_by_provider[combo.organization] == undefined ? product_price_by_provider[combo.organization] = individual_cost : product_price_by_provider[combo.organization] += individual_cost

						};
					};
				}
			};
			for (var x = 0; x < jsonData.single_offer_combos.length; x++) {
				combo = jsonData.single_offer_combos[x]
				if (combo.combo_history.status == "received"
					|| combo.combo_history.status == "selected") {
						if (combo.combo_product_history.product_id == product_id) {
							individual_quantity = parseInt(combo.combo_product_history.units)
							individual_cost = parseInt(combo.combo_product_history.unitary_price)
							total_quantity += individual_quantity
							total_cost += individual_cost
							product_units_by_provider[combo.organization] == undefined ? product_units_by_provider[combo.organization] = individual_quantity : product_units_by_provider[combo.organization] += individual_quantity
							product_price_by_provider[combo.organization] == undefined ? product_price_by_provider[combo.organization] = individual_cost : product_price_by_provider[combo.organization] += individual_cost
						};
				}
			};


			function format_data(data) {
				reformatted_data = new Array;
				Object.keys(data).map(function(obj) {
				   var rObj = {key: obj, value: data[obj] }
				    reformatted_data.push(rObj);
				})
				return reformatted_data;
			}

			function total_by_provider(a, b) {
				c = new Array;
				Object.keys(a).map(function(obj, i) {
				   var rObj = {key: obj, value: a[obj] * b[obj] }
				    c.push(rObj);
				})
				return c;
			}
			
			product_array.push({
				product_id: product_id,
				product_name: product_name,
				total_quantity: total_quantity,
				total_cost: total_cost,
				units_by_provider: format_data(product_units_by_provider),
				cost_by_provider: total_by_provider(product_price_by_provider, product_units_by_provider)
			});
	};
	return product_array
}


function setUpCostGraph(product_graph_data) {
	$('.order_history_graphs_block').append('<div class="graph_label">Gasto total por producto</div>')
	var canvasWidth = 500;
	var canvasHeight = 250;
	var xPadding = 50;
	var yPadding = 100;
	var height = canvasHeight - yPadding;
	var width = canvasWidth - xPadding;

	
	var columnPadding = 1;
	// var max_column_width = 40;


	max_cost = d3.max(product_graph_data.map(function(d) {return d.total_cost}));

	var costLinearScale = d3.scale.linear()
								.domain([0, max_cost])
								.range([1, height]);

    var yAxisScale = d3.scale.linear()
    							.domain([ max_cost, 0])
								.range([1, height]);
    
	var xAxisScale = d3.scale.ordinal()
					    .domain(product_graph_data.map(function(d) {return d.product_name}))
					    .rangeRoundBands([0, width], .1);

	var xAxis = d3.svg.axis()
					    .scale(xAxisScale)
					    .orient("bottom");					    

	var yAxis = d3.svg.axis()
						.scale(yAxisScale)
						.orient('left')
						.innerTickSize([width])
						.outerTickSize([10])


    var colorScale = d3.scale.linear()
    							.domain([0, max_cost/2, max_cost])
    							.range(['#F44410', '#F5DA29', '#7D4BA4'])
    							// .range(['#46AA37', '#4199ED', '#F54511'])
    							// .domain([0, max_cost*.25, max_cost*.5, max_cost*.75, max_cost])
    							// .range(['#41A736','#7D4BA4', '#2380D8', '#E27612', '#F54511'])



    var product_quantity_graph = d3.select('.order_history_graphs_block').append('svg')
    															.attr('width', canvasWidth)
    															.attr('height', canvasHeight)
    var y_axis = product_quantity_graph.append('g')
									.attr('class', 'y Axis')
									.attr('transform', 'translate(' + canvasWidth + ')')
    								.call(yAxis)

    product_quantity_graph.append("g")
							    .attr("class", "x Axis")
							    .attr('transform', 'translate(' + xPadding + ', ' + height + ')')
							    .call(xAxis)
							    .selectAll("text")  
						            .style("text-anchor", "end")
						            .attr("dx", "-.8em")
						            .attr("dy", ".15em")
						            .attr("transform", "rotate(-75)" );


    var column_group = product_quantity_graph.append('g')
    											.attr('class', 'column_group')
    											.attr('transform', 'translate(' + xPadding + ')');



    var columns = column_group.selectAll('rect')
    											.data(product_graph_data)
    											.enter()
    											.append('rect')

    // Define the div for the tooltip
	var div = d3.select("body").append("div")	
	    .attr("class", "tooltip tooltip_box")
	    .attr("z-index", "99")				
	    .style("opacity", 1)
    											

    var columnAttributes = columns
    						// .attr('width', function() {return d3.min([width / product_graph_data.length - columnPadding, max_column_width])	;})
    						.attr('width', function(d) {return xAxisScale.rangeBand()})
    						.attr('height', function(d) {return costLinearScale(d.total_cost); })
    						// .attr('x', function(d, i) {return  i * ( width / product_graph_data.length);  } )
    						.attr('x', function(d) {return xAxisScale(d.product_name)})
    						.attr('y', function(d) {return height - costLinearScale(d.total_cost); })
    						.attr('fill', function(d) {return colorScale(d.total_cost);} )
    						.attr('val', function(d) {return d.total_cost} )
    						.on('mouseover', function(d, i) {
						       div.transition()		
				                .duration(0)		
				                .style("opacity", .9)
				                div.html('<span>' + d.product_name +'</span>'+ ' <span style="color:red">$' + d.total_cost + '</span>')
				                // $('div.tooltip').offset({ top: event.pageY, left: event.pageX})
				                $('div.tooltip').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
    							// console.log(d3.mouse(this)[0])
    							d3.select(this).style('fill', '#4FAE3A')
    						})
    						.on('mousemove', function(d, i) {
    							$('div.tooltip').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
    						})
    						.on('mouseout', function(d, i) {
						       div.transition()		
				                .duration(0)		
				                .style("opacity", 0);	
    							d3.select(this).style('fill', colorScale(d.total_cost))
    						})
}

function setUpUnitGraph(product_graph_data) {

	// Titulo
	$('.order_history_graphs_block').append('<div class="graph_label">Cantidad por producto</div>')
	var canvasWidth = 500;
	var canvasHeight = 250;
	var xPadding = 50;
	var yPadding = 100;
	var height = canvasHeight - yPadding;
	var width = canvasWidth - xPadding;

	
	var columnPadding = 1;
	// var max_column_width = 40;


	max_units = d3.max(product_graph_data.map(function(d) {return d.total_quantity}));

	var costLinearScale = d3.scale.linear()
								.domain([0, max_units])
								.range([1, height]);

    var yAxisScale = d3.scale.linear()
    							.domain([ max_units, 0])
								.range([1, height]);
    
	var xAxisScale = d3.scale.ordinal()
					    .domain(product_graph_data.map(function(d) {return d.product_name}))
					    .rangeRoundBands([0, width], .1);

	var xAxis = d3.svg.axis()
					    .scale(xAxisScale)
					    .orient("bottom");					    

	var yAxis = d3.svg.axis()
						.scale(yAxisScale)
						.orient('left')
						.innerTickSize([width])
						.outerTickSize([10])


    var colorScale = d3.scale.linear()
    							.domain([0, max_units/2, max_units])
    							.range(['#F44410', '#F5DA29', '#7D4BA4'])
    							// .domain([0, max_units*.25, max_units*.5, max_units*.75, max_units])
    							// .range(['#F44410','#7D4BA4', '#2380D8', '#E27612', '#F54511'])



    var product_unit_graph = d3.select('.order_history_graphs_block').append('svg')
    															.attr('width', canvasWidth)
    															.attr('height', canvasHeight)
    															.append('g')
    															.attr('transform', 'translate(0, 5)')

    var y_axis = product_unit_graph.append('g')
									.attr('class', 'y Axis')
									.attr('transform', 'translate(' + canvasWidth + ')')
    								.call(yAxis)

    product_unit_graph.append("g")
							    .attr("class", "x Axis")
							    .attr('transform', 'translate(' + xPadding + ', ' + height + ')')
							    .call(xAxis)
							    .selectAll("text")  
						            .style("text-anchor", "end")
						            .attr("dx", "-.8em")
						            .attr("dy", ".15em")
						            .attr("transform", "rotate(-75)" );


    var column_group = product_unit_graph.append('g')
    											.attr('class', 'column_group')
    											.attr('transform', 'translate(' + xPadding + ')');



    var columns = column_group.selectAll('rect')
    											.data(product_graph_data)
    											.enter()
    											.append('rect')
    
        // Define the div for the tooltip
	var div2 = d3.select("body").append("div")	
	    .attr("class", "tooltip2 tooltip_box")
	    .attr("z-index", "99")				
	    .style("opacity", 1)							

    var columnAttributes = columns
    						.attr('width', function(d) {return xAxisScale.rangeBand()})
    						.attr('height', function(d) {return costLinearScale(d.total_quantity); })
    						.attr('x', function(d) {return xAxisScale(d.product_name)})
    						.attr('y', function(d) {return height - costLinearScale(d.total_quantity); })
    						.attr('fill', function(d) {return colorScale(d.total_quantity);} )
    						.on('mouseover', function(d, i) {
						       div2.transition()		
				                .duration(0)		
				                .style("opacity", .9)
				                div2.html('<span>' + d.product_name +'</span>'+ ' <span style="color:red">' + d.total_quantity + 'Kg</span>')
				                $('div.tooltip2').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
    							d3.select(this).style('fill', '#4FAE3A')
    						})
    						.on('mousemove', function(d, i) {
    							$('div.tooltip2').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
    						})
    						.on('mouseout', function(d, i) {
						       div2.transition()		
				                .duration(0)		
				                .style("opacity", 0);	
    							d3.select(this).style('fill', colorScale(d.total_quantity))
    						})
}

function setUpProductsPieGraph(product_graph_data) {

	var width = 250,
	    height = 200; // adjust for height of input bar div

	var legendRectSize = 5;
	var legendSpacing = 3;
	var legend_xshift = -50;
	// $('.order_history_products_graphs_block').append('<div class="graph_label 2">Unidades por proveedor</div>')
	// $('.order_history_products_graphs_block').append('<div class="graph_label 1">Costo total por proveedor</div>')
	

	var color = d3.scale.ordinal()
					.range(['#3182bd','#e6550d', '#756bb1', '#636363'])

	// draw and append the container
	var svg = d3.select(".order_history_products_graphs_block").append("svg")
	  .attr("width", width).attr("height", height).attr('id', 'product_donut_graph');

	// set the thickness of the inner and outer radii
	var min = Math.min(width, height);
	var oRadius = min / 2 * 0.85;
	var iRadius = min / 2 * 0.78;

	// construct default pie laoyut
	var pie = d3.layout.pie().value(function(d){ return d.value; }).sort(null);

	var tooltiper = d3.select("body").append("div")	
	    .attr("class", "pie_tooltip tooltip_box")
	    .attr("z-index", "99")				
	    .style("opacity", 1)	

	// construct arc generator
	var arc = d3.svg.arc()
	  .outerRadius(oRadius)
	  .innerRadius(iRadius)

	var g = svg.append('g')
	  .attr('transform', function(){
	    if ( window.innerWidth >= 960 ) var shiftWidth = width / 2;
	    if ( window.innerWidth < 960 ) var shiftWidth = width / 3;
	    return 'translate(' + shiftWidth + ',' + height / 2 + ')';
	  })
	  

	var data = product_graph_data[0].units_by_provider
	// enter data and draw pie chart
	var path = g.datum(data).selectAll("path")
	  .data(pie)
	  .enter().append("path")
	    .attr("class","piechart")
   	    .attr("fill", function(d,i){ return color(i); })
	    .attr("d", arc)
	    .each(function(d){ this._current = d; })

	var pie_legend = g.append('g')
					.attr('class', 'legend')
					// .attr('transform', function(){
					//     if ( window.innerWidth >= 960 ) var shiftWidth = width / 2;
					//     if ( window.innerWidth < 960 ) var shiftWidth = width / 3;
					//     return 'translate(' + shiftWidth + ',' + height / 2 + ')';
					//   })
					.attr('transform', function() {
						return 'translate(' + legend_xshift + ', 0)';
						translate(-55, 10)
					})
					.append('text')
					  .attr('x', legendRectSize + legendSpacing)
					  .attr('y', legendRectSize - legendSpacing)
					  // .html(function(d, i) {  debugger; return general_graph_data[0].total_quantity });


	function render(index){
		data = general_graph_data[index].units_by_provider
		total_quantity = general_graph_data[index].total_quantity;


	  // add transition to new path
	  g.datum(data).selectAll("path").data(pie).transition().duration(1000).attrTween("d", arcTween)

	  // add any new paths
	  g.datum(data).selectAll("path")
	    .data(pie)
	  .enter().append("path")
	    .attr("class","piechart")
	    .attr("fill", function(d,i){ 
	    	return color(i); 
	    })
	    .attr("d", arc)
	    .each(function(d){ 
	    	this._current = d; 
	    })

	  // remove data not being used
	  g.datum(data).selectAll("path")
	    .data(pie).exit().remove();

	   d3.selectAll('.piechart').on('mouseover', function(d, i) {
	       tooltiper.transition()		
            .duration(0)		
            .style("opacity", .9)
            tooltiper.html('<span>' + this.__data__.data.key +'</span>'+ ' <span style="color:red">' + this.__data__.data.value + 'Kg</span>')
            $('div.pie_tooltip').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
			d3.select(this).style('fill', '#4FAE3A')
		})
		.on('mousemove', function(d, i) {
			$('div.pie_tooltip').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
		})
		.on('mouseout', function(d, i) {
	       tooltiper.transition()		
            .duration(0)		
            .style("opacity", 0);	
			d3.select(this).style('fill', color(i))
		})


		// adjust tooltip to different fonts
		if (total_quantity >= 10 && total_quantity < 99) {
			d3.select('.legend').attr('transform', function() {
						return 'translate(-55, 10)';
					}).attr('class', 'legend two-digits')
		} else if(total_quantity >= 100 && total_quantity < 1000) {

			d3.select('.legend').attr('transform', function() {
						return 'translate(-60, 10)';
					}).attr('class', 'legend three-digits')

		} else {
			d3.select('.legend').attr('transform', function() {
						return 'translate(-42, 10)';
					}).attr('class', 'legend one-digit')
		}


		pie_legend.html( function() {return total_quantity == 0 ? "" : total_quantity + "kg"} );
	}

	$('select.product_selection').on('change', function(e) {
		selected_id = $('select option:selected').val()
		index = 0;
		for (key in general_graph_data) {
			if (general_graph_data[key].product_id == selected_id) {
				break;
			};
			index++;
		};

		render(index)
	})

	render(0);
	function makeData(size){
	  return d3.range(size).map(function(item){
	   return Math.random()*100;
	  });
	};

	// Store the displayed angles in _current.
	// Then, interpolate from _current to the new angles.
	// During the transition, _current is updated in-place by d3.interpolate.
	function arcTween(a) {
	  var i = d3.interpolate(this._current, a);
	  this._current = i(0);
	  return function(t) {
	    return arc(i(t));
	  };
	}
}

// indicastes price paid to each provider for product
function setUpProductsGraph(product_graph_data) {

	var canvasWidth = 500;
	var canvasHeight = 250;
	var xPadding = 50;
	var yPadding = 100;
	var height = canvasHeight - yPadding;
	var width = canvasWidth - xPadding;



    var product_unit_graph = d3.select('.order_history_products_graphs_block')
											.append('svg')
											.attr('id', 'individual_product_cost_chart')
											.attr('width', canvasWidth)
											.attr('height', canvasHeight)
											.append('g')
											.attr('transform', 'translate(0, 5)')


    var y_axis = product_unit_graph.append('g')
									.attr('class', 'y Axis')
									.attr('transform', 'translate(' + canvasWidth + ')')

    var x_axis = product_unit_graph.append("g")
							    .attr("class", "x Axis")
							    .attr('transform', 'translate(' + xPadding + ', ' + height + ')')

    var column_group = product_unit_graph.append('g')
    											.attr('class', 'column_group')
    											.attr('transform', 'translate(' + xPadding + ')');

	var div5 = d3.select("body").append("div")	
	    .attr("class", "tooltip5 tooltip_box")
	    .attr("z-index", "99")				
	    .style("opacity", 1)
						    
	function draw(data) {
		if (data.length == 0) {
			$('.product_not_bought_message').removeClass('hidden');
			$('#individual_product_cost_chart').attr("display", "none");
			$('#product_donut_graph').css('display', 'none');
			// $('select.product_selection').addClass("hidden");
		} else {
			$('.product_not_bought_message').addClass('hidden')
			$('#individual_product_cost_chart').removeAttr("display", "initial");
			$('#product_donut_graph').css('display', 'initial')
			// $('select.product_selection').removeClass("hidden")
		}
		max_units = d3.max(data.map(function(d) {
			return d.value
		}))


		var costLinearScale = d3.scale.linear()
									.domain([0, max_units])
									.range([1, height]);

	    var yAxisScale = d3.scale.linear()
	    							.domain([ max_units, 0])
									.range([1, height]);
	    
		var xAxisScale = d3.scale.ordinal()
						    .domain(data.map(function(d) {
						    	if (d.key.length > 12) {
						    		return d.key.substring(0,12) + "...";
						    	} else {
						    		return d.key;
						    	}
						    	
						    }))
						    .rangeRoundBands([0, width], .1);

		var xAxis = d3.svg.axis()
						    .scale(xAxisScale)
						    .orient("bottom");					    

		var yAxis = d3.svg.axis()
							.scale(yAxisScale)
							.orient('left')
							.innerTickSize([width])
							.outerTickSize([10])

	    var colorScale = d3.scale.ordinal()
					// .range(['#7f7f7f', '#1f77b4', '#ff7f0e', '#8c564b', '#d62728', ' #ff9896']);
					.range(['#3182bd','#e6550d', '#756bb1', '#636363'])

	    y_axis.call(yAxis);
	    x_axis.call(xAxis)
				    .selectAll("text")  
			            .style("text-anchor", "end")
			            .attr("dx", "-.8em")
			            .attr("dy", ".15em")
			            .attr("transform", "rotate(-75)" );

	    var columns = column_group.selectAll('rect')
												.data(data)
        columns
        	.enter().append('rect')

		var columnAttributes = columns
	    						.attr('width', function(d) {return xAxisScale.rangeBand()})
	    						// .attr('height', function(d) {return costLinearScale(d.value); })

	    						.on('mouseover', function(d, i) {
							       div5.transition()		
					                .duration(0)		
					                .style("opacity", .9)
					                div5.html('<span>' + d.key +'</span>'+ ' <span style="color:red">$' + d.value.toPrecision(3) + '</span>')
					                $('div.tooltip5').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
	    							d3.select(this).style('fill', '#4FAE3A')
	    						})
	    						.on('mousemove', function(d, i) {
	    							$('div.tooltip5').offset({ top: d3.event.pageY-50, left: d3.event.pageX})
	    						})
	    						.on('mouseout', function(d, i) {
							       div5.transition()		
					                .duration(0)		
					                .style("opacity", 0);	
	    							d3.select(this).style('fill', colorScale(d.value))
	    						}) 
	    columns
		    	.transition()
			    .duration(300)
			    .ease("quad")
			    .attr('height', function(d) {return costLinearScale(d.value); })
			    .attr('x', function(d) {return xAxisScale(d.key)})
				.attr('y', function(d) {return height - costLinearScale(d.value); })
				.attr('fill', function(d) {return colorScale(d.value);} )

	    columns.exit().remove();
	};

	function update(index) {
	    console.log("here");
	    var data = product_graph_data[index].cost_by_provider;
	    draw(data);
	};

	$('select.product_selection').on('change', function(e) {
		selected_id = $('select option:selected').val()
		index = 0;
		for (key in general_graph_data) {
			if (general_graph_data[key].product_id == selected_id) {
				break;
			};
			index++;
		};
		update(index)
	})






	dataset = product_graph_data[0].cost_by_provider;
	draw(dataset);
}

function assignBlockIds() {
	blockSize = 5;
	block_group = 1;
	$('.individual_offers_container').attr('data-active-block', block_group)
	$('.combo_product_history_list[data-block-group=' + block_group + ']').removeClass('hidden')
	offer_lists = $('.combo_product_history_list')
	for (var i = 0; i < offer_lists.length; i++) {
		$(offer_lists[i]).attr('data-block-group', block_group);

		if ((i + 1) % blockSize == 0) { block_group++};
	};
}

function addProductSelectionBox(jsonData) {
	selectionBox = "<select class='product_selection'>"
	for (var i = 0; i < jsonData.products.length; i++) {
		productOption = "<option value='" + jsonData.products[i].id + "'>"
		productOption += jsonData.products[i].name
		productOption += "</option>"
		selectionBox += productOption
		
	};
	selectionBox += "</select>"
	$('.order_history_products_graphs_block').append(selectionBox)
}


// adjust tooltip to different sizes
function tooltipAdjust (number, tooltip) {

}
assignBlockIds();

